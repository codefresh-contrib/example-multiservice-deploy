# Be sure to set Pipeline Concurrency to 1 (in this pipeline's Settings tab -> Policies)
# This is needed to prevent collisions between multiple triggers updating the same umbrella chart

version: '1.0'
stages:
  - prep
  - push chart to repo
  - build + test image
  - promote to test

steps:

  main_clone:
    title: Clone app repository
    stage: prep
    type: git-clone
    git: '${{GIT_PROVIDER_NAME}}'
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'

  get_changed_files:
    title: 'Detect changes: app vs. chart'
    stage: prep
    working_directory: '${{main_clone}}'
    image: alpine/git:latest
    commands:
      # Save committer email for later
      - cf_export COMMIT_AUTHOR_EMAIL=$(git show -s --format='%ae' ${{CF_SHORT_REVISION}})
      # Output CHART_CHANGED = true/false
      #   SERVICE is defined within each trigger, its value will be buslog, ctrlr, or flask-ui
      - >-
        git show --name-only --oneline $CF_SHORT_REVISION | grep '^${{SERVICE}}/chart/'
        && cf_export CHART_CHANGED=true || cf_export CHART_CHANGED=false
      # Output APP_CHANGED = true/false (i.e. did files other than the chart change?)
      #   The tail command skips the first line, which just has the git sha and commit message
      - >-
        git show --name-only --oneline $CF_SHORT_REVISION | tail -n +2 | grep -v '^${{SERVICE}}/chart/'
        && cf_export APP_CHANGED=true || cf_export APP_CHANGED=false

  get_chart_version:
    title: Get chart version
    stage: prep
    working_directory: '${{main_clone}}/${{SERVICE}}/chart'
    image: mikefarah/yq:4
    commands:
      - yq eval '.version' Chart.yaml
      - cf_export CHART_VERSION=$(yq eval '.version' Chart.yaml)

  lint_helm_chart:
    title: 'Lint updated chart'
    stage: push chart to repo
    working_directory: '${{main_clone}}/${{SERVICE}}/chart'
    image: 'codefresh/cfstep-helm:${{HELM_VER}}'  # Same image as the `helm` step
    commands:
      # chmod suppresses warnings about group-accessible kubeconfig
      - chmod 600 $KUBECONFIG
      - helm lint
    when:
      condition:
        any:
          chart_changed: '"${{CHART_CHANGED}}" == "true"'
          force_push_chart: '"${{FORCE_PUSH_CHART}}" == "true"'

  verify_unique_version:
    title: Verify chart version is unique
    stage: push chart to repo
    type: query-cf-helm-repo
    arguments:
      CHART_NAME: '${{SERVICE}}'
      CHART_VERSION: '${{CHART_VERSION}}'
      FAIL_WHEN: 'true'
    when:
      condition:
        all:
          chart_changed: '"${{CHART_CHANGED}}" == "true"'
          force_push_chart: '"${{FORCE_PUSH_CHART}}" == "false"'

  push_helm_chart:
    title: Push chart to Helm repo
    stage: push chart to repo
    type: helm
    working_directory: '${{main_clone}}/${{SERVICE}}/chart'
    arguments:
      helm_version: '${{HELM_VER}}'
      action: push
      chart_name: '.'
      chart_repo_url: '${{CF_CTX_CF_HELM_DEFAULT_URL}}'
    when:
      condition:
        any:
          chart_changed: '"${{CHART_CHANGED}}" == "true"'
          force_push_chart: '"${{FORCE_PUSH_CHART}}" == "true"'

  build_docker_image:
    title: Build Docker Image
    stage: build + test image
    type: build
    working_directory: '${{main_clone}}/${{SERVICE}}'
    image_name: '${{SERVICE}}'
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    dockerfile: 'Dockerfile'
    disable_push: true
    when:
      condition:
        any:
          app_changed: '"${{APP_CHANGED}}" == "true"'
          force_push_image: '"${{FORCE_PUSH_IMAGE}}" == "true"'

  unit_tests:
    title: Run Unit tests
    stage: build + test image
    working_directory: '${{main_clone}}/${{SERVICE}}'
    image: '${{build_docker_image}}'
    commands:
      - pip install pytest allure-pytest
      - mkdir -p $CF_VOLUME_PATH/allure-results
      - pytest --alluredir=$CF_VOLUME_PATH/allure-results
    when:
      condition:
        any:
          app_changed: '"${{APP_CHANGED}}" == "true"'
          force_push_image: '"${{FORCE_PUSH_IMAGE}}" == "true"'

  push_docker_image:
    title: Push image to Docker Registry
    stage: build + test image
    type: push
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    candidate: '${{build_docker_image}}'
    image_name: '${{SERVICE}}'
    registry: '${{REGISTRY_NAME}}'
    when:
      condition:
        any:
          app_changed: '"${{APP_CHANGED}}" == "true"'
          force_push_image: '"${{FORCE_PUSH_IMAGE}}" == "true"'

  # Clean cached git directory of dirty files from past builds
  reset_cached_repo:
    title: Clean GitOps repo cache
    stage: promote to test
    image: alpine/git:latest
    commands:
      - rm -rf ${{CF_VOLUME_PATH}}/${{DEPLOY_REPO_NAME}}

  clone_deploy_repo:
    title: Clone GitOps repository
    stage: promote to test
    type: git-clone
    git: '${{GIT_PROVIDER_NAME}}'
    repo: '${{DEPLOY_REPO_OWNER}}/${{DEPLOY_REPO_NAME}}'
    # If not using an environment monorepo, then set revision to your environment branch
    revision: main

  update_image_tag:
    title: 'Update image in umbrella chart'
    stage: promote to test
    working_directory: '${{clone_deploy_repo}}/${{PROMOTE_ENV}}'
    image: mikefarah/yq:4.9.8
    commands:
      # ${{SERVICE}} could contain a hyphen, so we have to enclose it with [" "]
      # See https://github.com/kislyuk/yq/issues/20, https://github.com/stedolan/jq/issues/38
      - yq eval ".[\"${{SERVICE}}\"].image.tag = \"${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}\"" values.yaml -i
      - cat values.yaml
    when:
      condition:
        any:
          app_changed: '"${{APP_CHANGED}}" == "true"'
          force_push_image: '"${{FORCE_PUSH_IMAGE}}" == "true"'

  update_umbrella_chart_versions:
    title: 'Update chart versions'
    stage: promote to test
    working_directory: '${{clone_deploy_repo}}/${{PROMOTE_ENV}}'
    image: mikefarah/yq:4.9.8
    commands:
      # Increment Umbrella chart version
      - export OLD_CHART_VER=$(yq eval '.version' Chart.yaml)
      - echo Old umbrella chart version was $OLD_CHART_VER
      - export NEW_CHART_VER=$(echo $OLD_CHART_VER | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
      - echo Incremented umbrella chart version is $NEW_CHART_VER
      - yq eval ".version = \"$NEW_CHART_VER\"" Chart.yaml -i
      # Apply subchart version
      - echo Applying version $CHART_VERSION to subchart $SERVICE
      - yq eval '(.dependencies[] | select(.name == "${{SERVICE}}") | .version ) = "${{CHART_VERSION}}"' Chart.yaml -i
      - cat Chart.yaml

  commit_and_push:
    title: Commit changes and push
    stage: promote to test
    type: git-commit
    arguments:
      repo: '${{DEPLOY_REPO_OWNER}}/${{DEPLOY_REPO_NAME}}'
      working_directory: '${{CF_VOLUME_PATH}}/${{DEPLOY_REPO_NAME}}'
      git: ${{GIT_PROVIDER_NAME}}
      commit_message: '${{CF_COMMIT_MESSAGE}}'
      git_user_name: '${{CF_COMMIT_AUTHOR}}'
      git_user_email: '${{COMMIT_AUTHOR_EMAIL}}'
      allow_empty: false
